Module 12: Data Modifications

Lab 12-1: Analyzing Data Modifications - Solution
Lab Setup
There is a setup required for this lab. If you need to start this lab again at any time, 
the tables used in this lab can be refreshed by executing the T-SQL script file named 
update_tables.sql as follows. The script resides in your $HOME/ptquery15 directory.

isql -Usa -P -i update_tables.sql

Objectives
After completing this lab, you should be able to:
* Examine the different types of update modes used by Adaptive Server

Description
In this lab, you will analyze update modes for Allpages and DOL tables.

Task Outline 
Task 1: Analyzing Update Modes for Allpages Tables
Task 2: Analyzing Update Modes for DOL Tables (Optional)

Detailed Instructions and Solutions
Task 1: Analyzing Update Modes for Allpages Tables 
Description



       

   
  
For all labs, you should open two windows (“A” and “B”). Unless instructed otherwise, perform all lab exercises in Window A. 
Make sure that you have exited ALL open sessions with Adaptive Server and that the operating system prompt appears in both windows. This ensures that your results will be consistent with the solutions for this lab.
Procedure
 
1. Perform the lab setup.
a.	Change the directory to $HOME/ptquery15.

cd $HOME/ptquery15


b.	Execute the T-SQL script file update_tables.sql.
isql -Usa -P -i update_tables.sql

2. Examine the characteristics of an Allpages table.
a.	Connect to Adaptive Server as the sa and access the pubtune_db database.

isql -Usa -P -D pubtune_db

b.	Examine the characteristics of the table named update_apl by using sp_help.

sp_help update_apl


Name       Owner Object_type Create_date         
---------- ----- ----------- ------------------- 
update_apl dbo   user table  Feb 22 2009  7:20PM 


Column_name Type    Length Prec Scale Nulls Default_name Rule_name Access_Rule_name Computed_Column_object Identity   
----------- ------- ------ ---- ----- ----- ------------ --------- ---------------- ---------------------- ---------- 
colA        int          4 NULL  NULL     0 (NULL)       (NULL)    (NULL)           (NULL)                          0 
colB        varchar    255 NULL  NULL     0 (NULL)       (NULL)    (NULL)           (NULL)                          0 
colC        char       200 NULL  NULL     0 (NULL)       (NULL)    (NULL)           (NULL)                          0 
Object does not have any indexes.
No defined keys for this object.


name       type       partition_type partitions partition_keys 
---------- ---------- -------------- ---------- -------------- 
update_apl base table roundrobin              1 (NULL)         
 


partition_name        partition_id pages row_count segment create_date         
--------------------- ------------ ----- --------- ------- ------------------- 
update_apl_2105055504   2105055504     5        33 default Apr 13 2008  7:20AM 
 


Partition_Conditions 
-------------------- 
(NULL)               
 


Avg_pages   Max_pages   Min_pages   Ratio(Max/Avg)                                                                        Ratio(Min/Avg)                                                                        
----------- ----------- ----------- ------------------------------------------------------------------------------------- ------------------------------------------------------------------------------------- 
5           5           5           1.0                                                                                   1.0                                                                                   
Lock scheme Allpages
The attribute 'exp_row_size' is not applicable to tables with allpages lock scheme.
The attribute 'concurrency_opt_threshold' is not applicable to tables with allpages lock scheme.
 


exp_row_size reservepagegap fillfactor max_rows_per_page identity_gap ascinserts  
------------ -------------- ---------- ----------------- ------------ ----------- 
0            0              0          0                 0            0           


concurrency_opt_threshold optimistic_index_lock dealloc_first_txtpg 
------------------------- --------------------- ------------------- 
0                         0                     0                   


What is the locking scheme used by the table?
Allpages
What are the column names, datatypes, and lengths? Do any columns allow NULL values?
colA is a 4-byte int
colB is a varchar(255)
colC is a char(200)
No NULL values are permitted for any column.
Is the table partitioned and does it have any indexes?
The table has one partition and no  indexes.


3. Examine the data in the table.


A stored procedure named showroworder_apl has already been created in the pubtune_db database. This procedure makes it easier to perform a select against the table. The stored procedure uses the substring function on colB and colC to shorten the output and prevent line-wrapping for display.	
a.	Examine the text of the stored procedure showroworder_apl using sp_helptext.

sp_helptext showroworder_apl


 # Lines of Text 
--------------- 
1               


text                                                                                                                                                                                                                                                            
------------------------------------------------------------------- 

create procedure showroworder_apl as
select colA, colB=substring(colB,1,20), colC=substring(colC,1,15)
from update_apl

b.	Execute the stored procedure showroworder_apl.

exec showroworder_apl


colA        colB                 colC            
----------- -------------------- --------------- 
1           not updated yet      row 1           
2           not updated yet      row 2           
3           not updated yet      row 3           
4           not updated yet      row 4           
5           not updated yet      row 5           
6           not updated yet      row 6           
7           not updated yet      row 7           
8           not updated yet      row 8           
9           not updated yet      row 9           
10          not updated yet      row 10          
11          not updated yet      row 11          
12          not updated yet      row 12          
13          not updated yet      row 13          
14          not updated yet      row 14          
15          not updated yet      row 15          
16          not updated yet      row 16          
17          not updated yet      row 17          
18          not updated yet      row 18          
19          not updated yet      row 19          
20          not updated yet      row 20          
21          not updated yet      row 21          
22          not updated yet      row 22          
23          not updated yet      row 23          
24          not updated yet      row 24          
25          not updated yet      row 25          
26          not updated yet      row 26          
27          not updated yet      row 27          
28          not updated yet      row 28          
29          not updated yet      row 29          
30          not updated yet      row 30          
31          not updated yet      row 31          
32          not updated yet      row 32          
33          not updated yet      row 33



Note: Adaptive Server does not guarantee the order of query output unless you use the order by clause with a select statement. The reason that this output is the physical order of the data as it is actually stored in this Allpages table is because:
1. The data is not changing while the query is running.
AND
2. The server is not configured for parallel access.
Do not depend on this behavior in a production system.
4. Update the fixed-length column colC for one row in update_apl and determine what kind of update occurs.
a.	Begin an interactive sp_sysmon session with sp_sysmon begin_sample.

sp_sysmon begin_sample


(return status = 0)
b.	Make a change to the fixed-length column colC for one row in the table by issuing the following update statement:

update update_apl
set colC = "new value" where colA = 1 

c.	End the interactive sp_sysmon session and print out just the Transaction Profile report by executing sp_sysmon end_sample, xactsum.

sp_sysmon end_sample, xactsum


=============================================================================== 
 
Transaction Profile
-------------------
 
  Transaction Summary             per sec      per xact       count  % of total
  -------------------------  ------------  ------------  ----------  ---------- 
    Committed Xacts                   0.2           n/a           1     n/a     
 
  Transaction Detail              per sec      per xact       count  % of total
  -------------------------  ------------  ------------  ----------  ---------- 
    Inserts
      APL Heap Table                101.3         608.0         608     100.0 %
      APL Clustered Table             0.0           0.0           0       0.0 %
      Data Only Lock Table            0.0           0.0           0       0.0 %
      Fast Bulk Insert                0.0           0.0           0       0.0 %
  -------------------------  ------------  ------------  ----------  ---------- 
    Total Rows Inserted             101.3         608.0         608      99.8 %
 
    Updates
      APL Deferred                    0.0           0.0           0       0.0 %
      APL Direct In-place             0.2           1.0           1     100.0 %
      APL Direct Cheap                0.0           0.0           0       0.0 %
      APL Direct Expensive            0.0           0.0           0       0.0 %
      DOL Deferred                    0.0           0.0           0       0.0 %
      DOL Direct                      0.0           0.0           0       0.0 %
  -------------------------  ------------  ------------  ----------  ---------- 
    Total Rows Updated                0.2           1.0           1       0.2 %
 
    Data Only Locked Updates
      Total Rows Updated              0.0           0.0           0       n/a   
  -------------------------  ------------  ------------  ----------  ---------- 
    Total DOL Rows Updated            0.0           0.0           0       0.0 %
 
    Deletes
      Total Rows Deleted              0.0           0.0           0       n/a   
  =========================  ============  ============  ==========
    Total Rows Affected             101.5         609.0         609            


Which update mode was chosen, and why?
Look at the Transaction Detail section and note that the row was updated as APL Direct In-place. The column colC is fixed length (char(200)) and does not allow NULLs so any change to the contents of the column does not change the row size. The row stays in the same location on the same page. This is the most efficient type of update because only one log record is needed (a modify record that records only the bytes that have changed in the row) and the row does not move.	

d.	Verify that this update did not cause the physical order of the data to change by using showroworder_apl.

showroworder_apl


colA        colB                 colC            
----------- -------------------- --------------- 
1           not updated yet      new value       
2           not updated yet      row 2           
3           not updated yet      row 3           
4           not updated yet      row 4           
5           not updated yet      row 5           
6           not updated yet      row 6           
7           not updated yet      row 7           
8           not updated yet      row 8           
9           not updated yet      row 9           
10          not updated yet      row 10          
11          not updated yet      row 11          
12          not updated yet      row 12          
13          not updated yet      row 13          
14          not updated yet      row 14          
15          not updated yet      row 15          
16          not updated yet      row 16          
17          not updated yet      row 17          
18          not updated yet      row 18          
19          not updated yet      row 19          
20          not updated yet      row 20          
21          not updated yet      row 21          
22          not updated yet      row 22          
23          not updated yet      row 23          
24          not updated yet      row 24          
25          not updated yet      row 25          
26          not updated yet      row 26          
27          not updated yet      row 27          
28          not updated yet      row 28          
29          not updated yet      row 29          
30          not updated yet      row 30          
31          not updated yet      row 31          
32          not updated yet      row 32          
33          not updated yet      row 33
5. Examine how triggers affect updates to fixed-length columns.
a.	Create an update trigger for update_apl by using the following statement:

create trigger trig_apl on update_apl for update as
print  "trigger fired for update_apl"


b.	Begin an interactive sp_sysmon session with sp_sysmon begin_sample.

sp_sysmon begin_sample


(return status = 0)

c.	Update the fixed-length column colC again for another row in the table by using the following update statement:

update update_apl
set colC = "new value" where colA = 2



trigger fired update_apl
(1 row affected)
d.	End the interactive sp_sysmon session and print out just the Transaction Profile report by executing sp_sysmon end_sample, xactsum.

sp_sysmon end_sample, xactsum

…
  Updates
      APL Deferred                    0.0           0.0           0       0.0 %
      APL Direct In-place             0.0           0.0           0       0.0 %
      APL Direct Cheap                0.1           0.2           1     100.0 %
      APL Direct Expensive            0.0           0.0           0       0.0 %
      DOL Deferred                    0.0           0.0           0       0.0 %
      DOL Direct                      0.0           0.0           0       0.0 %
  -------------------------  ------------  ------------  ----------  ---------- 
    Total Rows Updated                0.1           0.2           1       0.2 %
…





Which update mode was chosen, and why?
Look at the Transaction Detail section and note that the row was updated as APL Direct Cheap (not APL Direct In-place!). The column colC is fixed length (char(200)) and does not allow NULLs so any change to the contents of the column does not change the row size—but the presence of the trigger prevents the APL Direct In-place update. 
The log needs two records: a delete and an insert record. The trigger code needs to be able to query the special tables named inserted and deleted to examine the contents of the entire row before the update and the entire row after the update. These special tables are really just views of the log records. A single modify record, which records only the bytes that have changed in the row, would not contain all of the data required by the special tables. 
Even though the update is APL Direct Cheap, the row stays in the same location on the same page. This is the next-most-efficient type of update after an APL Direct In-place update.	

e. Verify that this update did not cause the physical order of the data to change by using showroworder_apl.

showroworder_apl


colA        colB                 colC            
----------- -------------------- --------------- 
1           not updated yet      new value       
2           not updated yet      new value       
3           not updated yet      row 3           
4           not updated yet      row 4           
5           not updated yet      row 5           
6           not updated yet      row 6           
7           not updated yet      row 7           
8           not updated yet      row 8           
9           not updated yet      row 9           
10          not updated yet      row 10          
11          not updated yet      row 11          
12          not updated yet      row 12          
13          not updated yet      row 13          
14          not updated yet      row 14          
15          not updated yet      row 15          
16          not updated yet      row 16          
17          not updated yet      row 17          
18          not updated yet      row 18          
19          not updated yet      row 19          
20          not updated yet      row 20          
21          not updated yet      row 21          
22          not updated yet      row 22          
23          not updated yet      row 23          
24          not updated yet      row 24          
25          not updated yet      row 25          
26          not updated yet      row 26          
27          not updated yet      row 27          
28          not updated yet      row 28          
29          not updated yet      row 29          
30          not updated yet      row 30          
31          not updated yet      row 31          
32          not updated yet      row 32          
33          not updated yet      row 33

f. Drop the trigger named trig1 that you just created for update_apl.

drop trigger trig_apl


6. Examine the update mode used for updates to variable-length columns.
a.	Begin an interactive sp_sysmon session with sp_sysmon begin_sample.

sp_sysmon begin_sample


(return status = 0)
b.	Make a small increase to the variable-length column colB for one row in the table by issuing the following update statement:


The replicate function returns a string containing the given expression repeated the specified number of times or as many times as will fit into a 255 byte space, whichever is less.

update update_apl
set colB = replicate("a", 20) where colA = 3



replicate is a T-SQL function that is used as a shortcut to avoid typing in a complete string that is repetitious, in this case 20 “a” values. The function has no relationship to Sybase Replication Server.	

(1 row affected)

c.	End the interactive sp_sysmon session and print out just the Transaction Profile report by executing sp_sysmon end_sample, xactsum.

sp_sysmon end_sample, xactsum

…
Updates
      APL Deferred                    0.0           0.0           0       0.0 %
      APL Direct In-place             0.0           0.0           0       0.0 %
      APL Direct Cheap                0.1           1.0           1     100.0 %
      APL Direct Expensive            0.0           0.0           0       0.0 %
      DOL Deferred                    0.0           0.0           0       0.0 %
      DOL Direct                      0.0           0.0           0       0.0 %
  -------------------------  ------------  ------------  ----------  ---------- 
    Total Rows Updated                0.1           1.0           1       0.2 %



Which update mode was chosen, and why?
Look at the Transaction Detail section and note that the row was updated as APL Direct Cheap. The column colB is variable length (varchar(255)), so most likely any change to the contents of the column will change the row size. If the contents are made smaller than the original, the update mode will be Direct Cheap and the row will obviously still fit on the same page. 
In this exercise, the contents of the column were made slightly larger, but not enough to force the row to move off the page. 
An APL Direct Cheap update is essentially a delete followed by an insert and the log shows two records —a delete and an insert record (even though there is no trigger at this point). 
When the update mode is APL Direct Cheap, the row stays in the same location on the same page. This is the next most efficient type of update after an APL Direct In-place update.	
d.	Verify that this update did not cause the physical order of the data to change by using showroworder_apl.

showroworder_apl


colA        colB                 colC            
----------- -------------------- --------------- 
1           not updated yet      new value       
2           not updated yet      new value       
3           aaaaaaaaaaaaaaaaaaaa row 3           
4           not updated yet      row 4           
5           not updated yet      row 5           
6           not updated yet      row 6           
7           not updated yet      row 7           
8           not updated yet      row 8           
9           not updated yet      row 9           
10          not updated yet      row 10          
11          not updated yet      row 11          
12          not updated yet      row 12          
13          not updated yet      row 13          
14          not updated yet      row 14          
15          not updated yet      row 15          
16          not updated yet      row 16          
17          not updated yet      row 17          
18          not updated yet      row 18          
19          not updated yet      row 19          
20          not updated yet      row 20          
21          not updated yet      row 21          
22          not updated yet      row 22          
23          not updated yet      row 23          
24          not updated yet      row 24          
25          not updated yet      row 25          
26          not updated yet      row 26          
27          not updated yet      row 27          
28          not updated yet      row 28          
29          not updated yet      row 29          
30          not updated yet      row 30          
31          not updated yet      row 31          
32          not updated yet      row 32          
33          not updated yet      row 33

7. Demonstrate how an update to a variable-length column may result in a deferred update.
a.	Begin an interactive sp_sysmon session with sp_sysmon begin_sample.

sp_sysmon begin_sample


(return status = 0)

b.	Make a large change to the variable-length colB for one row in the table by using the following update statement:

update update_apl
set colB = replicate("b", 255) where colA = 4



(1 row affected)

c.	End the interactive sp_sysmon session and print out just the Transaction Profile report by executing sp_sysmon end_sample, xactsum.

sp_sysmon end_sample, xactsum



Transaction Detail      per sec      per xact     count  % of total
…
Updates
      APL Deferred                    0.2           1.0           1     100.0 %
      APL Direct In-place             0.0           0.0           0       0.0 %
      APL Direct Cheap                0.0           0.0           0       0.0 %
      APL Direct Expensive            0.0           0.0           0       0.0 %
      DOL Deferred                    0.0           0.0           0       0.0 %
      DOL Direct                      0.0           0.0           0       0.0 %
  -------------------------  ------------  ------------  ----------  ---------- 
    Total Rows Updated                0.2           1.0           1       0.2 %

   Deletes
      APL Deferred                    0.0           0.0           0       0.0 %
      APL Direct                      0.2           1.0           1     100.0 %
      DOL                             0.0           0.0           0       0.0 %
  -------------------------  ------------  ------------  ----------  ---------- 
    Total Rows Deleted                0.2           1.0           1       0.2 %



Which update mode was chosen, and why?
Look at the Transaction Detail section and note that the row was updated as APL Deferred. The column colB is variable length (varchar(255)), and this time the update increased the storage requirement so the row no longer fits on the page. Because the table is a heap table, the row was moved to the end of the table.
	
	The reason this update was APL Deferred and not APL Direct Cheap is that the table has no indexes and the row was found using a table scan. Adaptive Server has no idea how many rows will qualify, so it must defer the insert until all qualifying rows have been found; otherwise, the row would be found again later in the scan and be updated again!
An APL Deferred update is similar to an APL Direct Cheap update in that the update is essentially a delete followed by an insert and the log shows two records—a delete and an insert record. But for performance, the APL Deferred update is more costly because: 
1. The log records must be scanned before the insert phase. 
AND 
2. The data movement to the new page requires an extra step.	
d.	Verify that this update has caused the physical order of the data to change by using showroworder_apl.

showroworder_apl


colA        colB                 colC            
----------- -------------------- --------------- 
1           not updated yet      new value       
2           not updated yet      new value       
3           aaaaaaaaaaaaaaaaaaaa row 3           
5           not updated yet      row 5           
6           not updated yet      row 6           
7           not updated yet      row 7           
8           not updated yet      row 8           
9           not updated yet      row 9           
10          not updated yet      row 10          
11          not updated yet      row 11          
12          not updated yet      row 12          
13          not updated yet      row 13          
14          not updated yet      row 14          
15          not updated yet      row 15          
16          not updated yet      row 16          
17          not updated yet      row 17          
18          not updated yet      row 18          
19          not updated yet      row 19          
20          not updated yet      row 20          
21          not updated yet      row 21          
22          not updated yet      row 22          
23          not updated yet      row 23          
24          not updated yet      row 24          
25          not updated yet      row 25          
26          not updated yet      row 26          
27          not updated yet      row 27          
28          not updated yet      row 28          
29          not updated yet      row 29          
30          not updated yet      row 30          
31          not updated yet      row 31          
32          not updated yet      row 32          
33          not updated yet      row 33          
4           bbbbbbbbbbbbbbbbbbbb row 4

8. Observe the conditions under which a change to a variable-length column may be accomplished as APL Direct Expensive update instead of APL Deferred.
a.	Create a unique nonclustered index on colA in update_apl:

create unique index idx1 on update_apl(colA)


b.	Begin an interactive sp_sysmon session with sp_sysmon begin_sample.

sp_sysmon begin_sample


(return status = 0)

c.	Make a large change to the variable-length column colB for one row in the table by using the following update statement:

update update_apl
set colB = replicate("c", 255) where colA = 9



(1 row affected)

d.	End the interactive sp_sysmon session and print out just the Transaction Profile report by executing sp_sysmon end_sample, xactsum.

sp_sysmon end_sample, xactsum



  Updates
      APL Deferred                    0.0           0.0           0       0.0 %
      APL Direct In-place             0.0           0.0           0       0.0 %
      APL Direct Cheap                0.0           0.0           0       0.0 %
      APL Direct Expensive            0.2           1.0           1     100.0 %
      DOL Deferred                    0.0           0.0           0       0.0 %
      DOL Direct                      0.0           0.0           0       0.0 %
  -------------------------  ------------  ------------  ----------  ---------- 
    Total Rows Updated                0.2           1.0           1       0.2 %

…

Which update mode was chosen, and why?
Look at the Transaction Detail section and note that the row was updated as APL Direct Expensive. The column colB is variable length (varchar(255)), and the update increased the storage requirement so the row no longer fits on the page. Because the table is a heap table, the row was moved to the end of the table.
The reason this update was APL Direct Expensive and not APL Deferred is that the table now has an index that can be used to access the qualifying row. Because the index is unique and the value of the indexed column has not changed, there is no need to defer the update because the row will not be accessed twice.
An APL Direct Expensive update is similar to an APL Direct Cheap update in that the update is essentially a delete followed by an insert and the log shows two records—a delete and an insert record. For performance, the APL Direct Expensive update is more costly because the data movement to the new page requires an extra step. But it is still better than an APL Deferred update because there’s no need to scan the log prior to the insert phase.	
e.	Verify that this update has also caused the physical order of the data to change by using showroworder_apl.

showroworder_apl


colA        colB                 colC            
----------- -------------------- --------------- 
1           not updated yet      new value       
2           not updated yet      new value       
3           aaaaaaaaaaaaaaaaaaaa row 3           
5           not updated yet      row 5           
6           not updated yet      row 6           
7           not updated yet      row 7           
8           not updated yet      row 8           
10          not updated yet      row 10          
11          not updated yet      row 11          
12          not updated yet      row 12          
13          not updated yet      row 13          
14          not updated yet      row 14          
15          not updated yet      row 15          
16          not updated yet      row 16          
17          not updated yet      row 17          
18          not updated yet      row 18          
19          not updated yet      row 19          
20          not updated yet      row 20          
21          not updated yet      row 21          
22          not updated yet      row 22          
23          not updated yet      row 23          
24          not updated yet      row 24          
25          not updated yet      row 25          
26          not updated yet      row 26          
27          not updated yet      row 27          
28          not updated yet      row 28          
29          not updated yet      row 29          
30          not updated yet      row 30          
31          not updated yet      row 31          
32          not updated yet      row 32          
33          not updated yet      row 33          
4           bbbbbbbbbbbbbbbbbbbb row 4           
9           cccccccccccccccccccc row 9


Task 2: Analyzing Update Modes for DOL Tables (Optional) 

Procedure
1. Examine the characteristics of a DOL table.
a.	Examine the characteristics of the table named update_drl by using sp_help.

sp_help update_drl

Name       Owner Object_type Create_date         
---------- ----- ----------- ------------------- 
update_drl dbo   user table  Apr 13 2008  7:20AM 


Column_name Type    Length Prec Scale Nulls Default_name Rule_name Access_Rule_name Computed_Column_object Identity   
----------- ------- ------ ---- ----- ----- ------------ --------- ---------------- ---------------------- ---------- 
colA        int          4 NULL  NULL     0 (NULL)       (NULL)    (NULL)           (NULL)                          0 
colB        varchar    255 NULL  NULL     0 (NULL)       (NULL)    (NULL)           (NULL)                          0 
colC        char       200 NULL  NULL     0 (NULL)       (NULL)    (NULL)           (NULL)                          0 
Object does not have any indexes.
No defined keys for this object.


name       type       partition_type partitions partition_keys 
---------- ---------- -------------- ---------- -------------- 
update_drl base table roundrobin              1 (NULL)         
 


partition_name        partition_id pages row_count segment create_date         
--------------------- ------------ ----- --------- ------- ------------------- 
update_drl_2137055618   2137055618     5        33 default Apr 13 2008  7:20AM 
 


Partition_Conditions 
-------------------- 
(NULL)               
 


Avg_pages   Max_pages   Min_pages   Ratio(Max/Avg)                                                                        Ratio(Min/Avg)                                                                        
----------- ----------- ----------- ------------------------------------------------------------------------------------- ------------------------------------------------------------------------------------- 
5           5           5           1.0                                                                                   1.0                                                                                   
Lock scheme Datarows
The 'ascinserts' attribute is not applicable to tables with datarow or datapage lock schemes.
 


exp_row_size reservepagegap fillfactor max_rows_per_page identity_gap ascinserts  
------------ -------------- ---------- ----------------- ------------ ----------- 
0            0              0          0                 0            0           


concurrency_opt_threshold optimistic_index_lock dealloc_first_txtpg 
------------------------- --------------------- ------------------- 
15                        0                     0                   





What is the locking scheme used by the table?
Datarows
What are the column names, datatypes, and lengths? Do any columns allow NULL values?
colA is a 4-byte int
colB is a varchar(255)
colC is a char(200)
No NULL values are permitted for any column.
Is the table partitioned and does it have any indexes?
The table has a single partition and no indexes.
2.	Examine the data in the table.


A stored procedure named showroworder_drl has already been created in the pubtune_db database. This procedure makes it easier to perform a select against the table. The stored procedure uses the substring function on colB and colC to shorten the output and prevent line-wrapping for display. You can examine the text of the stored procedure by using sp_helptext.	

a.	Execute the stored procedure showroworder_drl.

exec showroworder_drl


colA        colB                 colC            
----------- -------------------- --------------- 
1           not updated yet      row 1           
2           not updated yet      row 2           
3           not updated yet      row 3           
4           not updated yet      row 4           
5           not updated yet      row 5           
6           not updated yet      row 6           
7           not updated yet      row 7           
8           not updated yet      row 8           
9           not updated yet      row 9           
10          not updated yet      row 10          
11          not updated yet      row 11          
12          not updated yet      row 12          
13          not updated yet      row 13          
14          not updated yet      row 14          
15          not updated yet      row 15          
16          not updated yet      row 16          
17          not updated yet      row 17          
18          not updated yet      row 18          
19          not updated yet      row 19          
20          not updated yet      row 20          
21          not updated yet      row 21          
22          not updated yet      row 22          
23          not updated yet      row 23          
24          not updated yet      row 24          
25          not updated yet      row 25          
26          not updated yet      row 26          
27          not updated yet      row 27          
28          not updated yet      row 28          
29          not updated yet      row 29          
30          not updated yet      row 30          
31          not updated yet      row 31          
32          not updated yet      row 32          
33          not updated yet      row 33



Note: Adaptive Server does not guarantee the order of query output unless you use the order by clause with a select statement. The reason that this output is the physical order of the data as it is actually stored in this DOL table is because:
1. The data is not changing while the query is running.
AND
2. The server is not configured for parallel access.
AND
3. The table is small and resides on only one extent.
Do not depend on this behavior in a production system.
3.	Update the fixed-length column colC for one row in update_drl and determine what kind of update occurs.
a.	Begin an interactive sp_sysmon session with sp_sysmon begin_sample.

sp_sysmon begin_sample


(return status = 0)

b.	Make a small increase to the fixed-length column colC for one row in the table by issuing the following update statement:

update update_drl
set colC = "new value" where colA = 1



(1 row affected)

c.	End the interactive sp_sysmon session and print out just the Transaction Profile report by executing sp_sysmon end_sample, xactsum.

sp_sysmon end_sample, xactsum



…

    Updates
      APL Deferred                    0.0           0.0           0       0.0 %
      APL Direct In-place             0.0           0.0           0       0.0 %
      APL Direct Cheap                0.0           0.0           0       0.0 %
      APL Direct Expensive            0.0           0.0           0       0.0 %
      DOL Deferred                    0.0           0.0           0       0.0 %
      DOL Direct                      0.2           1.0           1     100.0 %
  -------------------------  ------------  ------------  ----------  ---------- 
    Total Rows Updated                0.2           1.0           1       0.2 %
 
    Data Only Locked Updates
      DOL Replace                     0.2           1.0           1     100.0 %
      DOL Shrink                      0.0           0.0           0       0.0 %
      DOL Cheap Expand                0.0           0.0           0       0.0 %
      DOL Expensive Expand            0.0           0.0           0       0.0 %
      DOL Expand & Forward            0.0           0.0           0       0.0 %
      DOL Fwd Row Returned            0.0           0.0           0       0.0 %
  -------------------------  ------------  ------------  ----------  ---------- 
    Total DOL Rows Updated            0.2           1.0           1       0.2 %

    …

Which update mode was chosen, and why?
Look at the Transaction Detail section and note that the row was updated as DOL Direct. The detail section below it for Data Only Locked Updates shows it was a DOL Replace.
The column colC is fixed length (char(200)) and does not allow NULLs so any change to the contents of the column does not change the row size. The row stays in the same location on the same page. The row did not need to move. If it did, it would have used a DOL Expand & Forward update.	
d.	Verify that this update did not cause the physical order of the data to change by using showroworder_drl.

showroworder_drl


colA        colB                 colC            
----------- -------------------- --------------- 
1           not updated yet      new value       
2           not updated yet      row 2           
3           not updated yet      row 3           
4           not updated yet      row 4           
5           not updated yet      row 5           
6           not updated yet      row 6           
7           not updated yet      row 7           
8           not updated yet      row 8           
9           not updated yet      row 9           
10          not updated yet      row 10          
11          not updated yet      row 11          
12          not updated yet      row 12          
13          not updated yet      row 13          
14          not updated yet      row 14          
15          not updated yet      row 15          
16          not updated yet      row 16          
17          not updated yet      row 17          
18          not updated yet      row 18          
19          not updated yet      row 19          
20          not updated yet      row 20          
21          not updated yet      row 21          
22          not updated yet      row 22          
23          not updated yet      row 23          
24          not updated yet      row 24          
25          not updated yet      row 25          
26          not updated yet      row 26          
27          not updated yet      row 27          
28          not updated yet      row 28          
29          not updated yet      row 29          
30          not updated yet      row 30          
31          not updated yet      row 31          
32          not updated yet      row 32          
33          not updated yet      row 33

4.	Examine how triggers affect updates to DOL fixed-length columns.
a.	Create an update trigger for update_drl by using the following statement:

create trigger trig_drl on update_drl for update as
print  "trigger fired for update_drl"


b.	Begin an interactive sp_sysmon session with sp_sysmon begin_sample.

sp_sysmon begin_sample


(return status = 0)
c.	Update the fixed-length column colC again for another row in the table by using the following update statement:

update update_drl
set colC = "new value" where colA = 2



trigger fired for update_drl
(1 row affected)

d.	End the interactive sp_sysmon session and print out just the Transaction Profile report by executing sp_sysmon end_sample, xactsum.

sp_sysmon end_sample, xactsum


…
 Updates
      APL Deferred                    0.0           0.0           0       0.0 %
      APL Direct In-place             0.0           0.0           0       0.0 %
      APL Direct Cheap                0.0           0.0           0       0.0 %
      APL Direct Expensive            0.0           0.0           0       0.0 %
      DOL Deferred                    0.0           0.0           0       0.0 %
      DOL Direct                      0.2           1.0           1     100.0 %
  -------------------------  ------------  ------------  ----------  ---------- 
    Total Rows Updated                0.2           1.0           1       0.2 %
 
    Data Only Locked Updates
      DOL Replace                     0.2           1.0           1     100.0 %
      DOL Shrink                      0.0           0.0           0       0.0 %
      DOL Cheap Expand                0.0           0.0           0       0.0 %
      DOL Expensive Expand            0.0           0.0           0       0.0 %
      DOL Expand & Forward            0.0           0.0           0       0.0 %
      DOL Fwd Row Returned            0.0           0.0           0       0.0 %
  -------------------------  ------------  ------------  ----------  ---------- 
    Total DOL Rows Updated            0.2           1.0           1       0.2 %

…

Which update mode was chosen, and why?
Look at the Transaction Detail section and note that the row was updated as DOL Direct via DOL Replace. The presence of the trigger did not change the update mode, unlike with Allpages tables, for which an APL Direct Cheap would be chosen in place of an APL Direct In-place. See the solution for Section 1, step 4d.	

e.	Verify that this update did not cause the physical order of the data to change by using showroworder_drl.

showroworder_drl


colA        colB                 colC            
----------- -------------------- --------------- 
1           not updated yet      new value       
2           not updated yet      new value       
3           not updated yet      row 3           
4           not updated yet      row 4           
5           not updated yet      row 5           
6           not updated yet      row 6           
7           not updated yet      row 7           
8           not updated yet      row 8           
9           not updated yet      row 9           
10          not updated yet      row 10          
11          not updated yet      row 11          
12          not updated yet      row 12          
13          not updated yet      row 13          
14          not updated yet      row 14          
15          not updated yet      row 15          
16          not updated yet      row 16          
17          not updated yet      row 17          
18          not updated yet      row 18          
19          not updated yet      row 19          
20          not updated yet      row 20          
21          not updated yet      row 21          
22          not updated yet      row 22          
23          not updated yet      row 23          
24          not updated yet      row 24          
25          not updated yet      row 25          
26          not updated yet      row 26          
27          not updated yet      row 27          
28          not updated yet      row 28          
29          not updated yet      row 29          
30          not updated yet      row 30          
31          not updated yet      row 31          
32          not updated yet      row 32          
33          not updated yet      row 33

f.	Drop the trigger named trig_drl that you just created for update_drl.

drop trigger trig_drl


5.	Examine the update mode used for updates to variable-length columns.
a.	Begin an interactive sp_sysmon session with sp_sysmon begin_sample.

sp_sysmon begin_sample


(return status = 0)
b.	Make a small increase to the variable-length column colB for one row in the table by issuing the following update statement:

update update_drl
set colB = replicate("a", 20) where colA = 3


(1 row affected)

c.	End the interactive sp_sysmon session and print out just the Transaction Profile report by executing sp_sysmon end_sample, xactsum.

sp_sysmon end_sample, xactsum



… 
Updates
      APL Deferred                    0.0           0.0           0       0.0 %
      APL Direct In-place             0.0           0.0           0       0.0 %
      APL Direct Cheap                0.0           0.0           0       0.0 %
      APL Direct Expensive            0.0           0.0           0       0.0 %
      DOL Deferred                    0.0           0.0           0       0.0 %
      DOL Direct                      0.2           1.0           1     100.0 %
  -------------------------  ------------  ------------  ----------  ---------- 
    Total Rows Updated                0.2           1.0           1       0.2 %
 
    Data Only Locked Updates
      DOL Replace                     0.0           0.0           0       0.0 %
      DOL Shrink                      0.0           0.0           0       0.0 %
      DOL Cheap Expand                0.0           0.0           0       0.0 %
      DOL Expensive Expand            0.2           1.0           1     100.0 %
      DOL Expand & Forward            0.0           0.0           0       0.0 %
      DOL Fwd Row Returned            0.0           0.0           0       0.0 %
  -------------------------  ------------  ------------  ----------  ---------- 
    Total DOL Rows Updated            0.2           1.0           1       0.2 %
…

Which update mode was chosen, and why?
Look at the Transaction Detail section and note that the row was updated as DOL Direct  via DOL Expensive Expand. 
The column colB is variable length (varchar(255)), so most likely any change to the contents of the column will change the row size. In this exercise, the contents of the column were made slightly larger, but not enough to force the row to move off the page. The row stays in the same location on the same page. This is the next-most-efficient type of update after a DOL Cheap Expand update.
For an Allpages table, this would have been an APL Direct Cheap update.
d.	Verify that this update did not cause the physical order of the data to change by using showroworder_drl.

showroworder_drl


colA        colB                 colC            
----------- -------------------- --------------- 
1           not updated yet      new value       
2           not updated yet      new value       
3           aaaaaaaaaaaaaaaaaaaa row 3           
4           not updated yet      row 4           
5           not updated yet      row 5           
6           not updated yet      row 6           
7           not updated yet      row 7           
8           not updated yet      row 8           
9           not updated yet      row 9           
10          not updated yet      row 10          
11          not updated yet      row 11          
12          not updated yet      row 12          
13          not updated yet      row 13          
14          not updated yet      row 14          
15          not updated yet      row 15          
16          not updated yet      row 16          
17          not updated yet      row 17          
18          not updated yet      row 18          
19          not updated yet      row 19          
20          not updated yet      row 20          
21          not updated yet      row 21          
22          not updated yet      row 22          
23          not updated yet      row 23          
24          not updated yet      row 24          
25          not updated yet      row 25          
26          not updated yet      row 26          
27          not updated yet      row 27          
28          not updated yet      row 28          
29          not updated yet      row 29          
30          not updated yet      row 30          
31          not updated yet      row 31          
32          not updated yet      row 32          
33          not updated yet      row 33

6.	Demonstrate how an update to a variable-length column may result in a DOL Direct / Expand & Forward update.
a.	Begin an interactive sp_sysmon session with sp_sysmon begin_sample.

sp_sysmon begin_sample


(return status = 0)
b.	Make a large change to the variable-length colB for one row in the table by using the following update statement:

update update_drl
set colB = replicate("b", 255) where colA = 4



(1 row affected)

c.	End the interactive sp_sysmon session and print out just the Transaction Profile report by executing sp_sysmon end_sample, xactsum.

sp_sysmon end_sample, xactsum


…

    Transaction Detail              per sec      per xact       count  % of total
  -------------------------  ------------  ------------  ----------  ---------- 
    Inserts
      APL Heap Table                101.3         608.0         608      99.8 %
      APL Clustered Table             0.0           0.0           0       0.0 %
      Data Only Lock Table            0.2           1.0           1       0.2 %
      Fast Bulk Insert                0.0           0.0           0       0.0 %
  -------------------------  ------------  ------------  ----------  ---------- 
    Total Rows Inserted             101.5         609.0         609      99.8 %
 
    Updates
      APL Deferred                    0.0           0.0           0       0.0 %
      APL Direct In-place             0.0           0.0           0       0.0 %
      APL Direct Cheap                0.0           0.0           0       0.0 %
      APL Direct Expensive            0.0           0.0           0       0.0 %
      DOL Deferred                    0.0           0.0           0       0.0 %
      DOL Direct                      0.2           1.0           1     100.0 %
  -------------------------  ------------  ------------  ----------  ---------- 
    Total Rows Updated                0.2           1.0           1       0.2 %
 
    Data Only Locked Updates
      DOL Replace                     0.0           0.0           0       0.0 %
      DOL Shrink                      0.0           0.0           0       0.0 %
      DOL Cheap Expand                0.0           0.0           0       0.0 %
      DOL Expensive Expand            0.0           0.0           0       0.0 %
      DOL Expand & Forward            0.2           1.0           1     100.0 %
      DOL Fwd Row Returned            0.0           0.0           0       0.0 %
  -------------------------  ------------  ------------  ----------  ---------- 
    Total DOL Rows Updated            0.2           1.0           1       0.2 %
     …



Which update mode was chosen, and why?
Look at the Transaction Detail section and note that the row was updated as DOL Direct via DOL Expand & Forward.
The row no longer fits in its original location and has to move. However, a pointer remains in the original location pointing to the new location. Therefore there is an associated insert but no delete.
Note: If this table had been an Allpages table, the optimizer would have chosen an APL Deferred Update, and row 4 would have moved (completely) to the end of the heap.	
d.	Examine the physical order of the data by using showroworder_drl.

showroworder_drl


 colA        colB                 colC            
----------- -------------------- --------------- 
1           not updated yet      new value       
2           not updated yet      new value       
3           aaaaaaaaaaaaaaaaaaaa row 3           
4           bbbbbbbbbbbbbbbbbbbb row 4           
5           not updated yet      row 5           
6           not updated yet      row 6           
7           not updated yet      row 7           
8           not updated yet      row 8           
9           not updated yet      row 9           
10          not updated yet      row 10          
11          not updated yet      row 11          
12          not updated yet      row 12          
13          not updated yet      row 13          
14          not updated yet      row 14          
15          not updated yet      row 15          
16          not updated yet      row 16          
17          not updated yet      row 17          
18          not updated yet      row 18          
19          not updated yet      row 19          
20          not updated yet      row 20          
21          not updated yet      row 21          
22          not updated yet      row 22          
23          not updated yet      row 23          
24          not updated yet      row 24          
25          not updated yet      row 25          
26          not updated yet      row 26          
27          not updated yet      row 27          
28          not updated yet      row 28          
29          not updated yet      row 29          
30          not updated yet      row 30          
31          not updated yet      row 31          
32          not updated yet      row 32          
33          not updated yet      row 33



Does it appear that the row was forwarded? Explain.
It is not apparent from this select statement that the row has been forwarded, but Adaptive Server did need to make an extra I/O when it came to the forward pointer in the original row location.	

e.	In Window B, verify that the row was forwarded by using optdiag.

optdiag statistics pubtune_db..update_drl -Usa -P
OptDiag/15.0.2/EBF 15389 ESD#3/P/NT (IX86)/Windows 2000/ase1502/2527/32-bit/OPT/Tue Mar 11 07:45:35 2008
Adaptive Server Enterprise/15.0.2/EBF 15388 ESD#3/P/Linux Intel/Linux 2.4.21-47.ELsmp i686/ase1502/2527/32-bit/FBO/Tue Mar 11 11:19:44 2008

Server name:                            "CHI102_2K"

Specified database:                     "pubtune_db"
Specified table owner:                  not specified
Specified table:                        "update_drl"
Specified column:                       not specified

Table owner:                            "dbo"
Table name:                             "update_drl"

Statistics for table:                   "update_drl"

     Data page count:                   5
     Empty data page count:             0
     Data row count:                    33.0000000000000000
     Forwarded row count:               1.0000000000000000
     Deleted row count:                 0.0000000000000000
     Data page CR count:                0.0000000000000000
     OAM + allocation page count:       2
     First extent data pages:           0
     Data row size:                     339.5000000000000000
     Parallel join degree:              0.0000000000000000
     Unused page count:                 2
     OAM page count:                    1

  Derived statistics:                   
     Data page cluster ratio:           0.9999900000000001
     Space utilization:                 1.1192307692307693
     Large I/O efficiency:              1.0000000000000000

No statistics for remaining columns:    "colA"
(default values used)                   "colB"
                                        "colC"

Optdiag succeeded.
7.	Demonstrate how an update to a variable-length column may result in a DOL Deferred update.
a.	Begin an interactive sp_sysmon session with sp_sysmon begin_sample.

sp_sysmon begin_sample


(return status = 0)
b.	Make a change to the variable-length colB by using a join in the update statement:

update update_drl
set colB = 'Updated'
from update_drl a, update_drl b
where a.colA = b.colA
and a.colA = 5



(1 row affected)

c.	End the interactive sp_sysmon session and print out just the Transaction Profile report by executing sp_sysmon end_sample, xactsum.

sp_sysmon end_sample, xactsum

…

 Updates
      APL Deferred                    0.0           0.0           0       0.0 %
      APL Direct In-place             0.0           0.0           0       0.0 %
      APL Direct Cheap                0.0           0.0           0       0.0 %
      APL Direct Expensive            0.0           0.0           0       0.0 %
      DOL Deferred                    0.2           0.2           1     100.0 %
      DOL Direct                      0.0           0.0           0       0.0 %
  -------------------------  ------------  ------------  ----------  ---------- 
    Total Rows Updated                0.2           0.2           1       0.2 %
 
    Data Only Locked Updates
      DOL Replace                     0.0           0.0           0       0.0 %
      DOL Shrink                      0.2           0.2           1     100.0 %
      DOL Cheap Expand                0.0           0.0           0       0.0 %
      DOL Expensive Expand            0.0           0.0           0       0.0 %
      DOL Expand & Forward            0.0           0.0           0       0.0 %
      DOL Fwd Row Returned            0.0           0.0           0       0.0 %
  -------------------------  ------------  ------------  ----------  ---------- 
    Total DOL Rows Updated            0.2           0.2           1       0.2 %

…

Which update mode was chosen, and why?
Look at the Transaction Detail section and note that the row was updated as DOL Deferred via DOL Shrink.
d.	Verify that this update has not caused the physical order of the data to change by using showroworder_drl.

showroworder_drl


 colA        colB                 colC            
----------- -------------------- --------------- 
1           not updated yet      new value       
2           not updated yet      new value       
3           aaaaaaaaaaaaaaaaaaaa row 3           
4           bbbbbbbbbbbbbbbbbbbb row 4           
5           Updated              row 5           
6           not updated yet      row 6           
7           not updated yet      row 7           
8           not updated yet      row 8           
9           not updated yet      row 9           
10          not updated yet      row 10          
11          not updated yet      row 11          
12          not updated yet      row 12          
13          not updated yet      row 13          
14          not updated yet      row 14          
15          not updated yet      row 15          
16          not updated yet      row 16          
17          not updated yet      row 17          
18          not updated yet      row 18          
19          not updated yet      row 19          
20          not updated yet      row 20          
21          not updated yet      row 21          
22          not updated yet      row 22          
23          not updated yet      row 23          
24          not updated yet      row 24          
25          not updated yet      row 25          
26          not updated yet      row 26          
27          not updated yet      row 27          
28          not updated yet      row 28          
29          not updated yet      row 29          
30          not updated yet      row 30          
31          not updated yet      row 31          
32          not updated yet      row 32          
33          not updated yet      row 33





