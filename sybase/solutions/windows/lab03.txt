Module 3: The Tuning Toolbox

Lab 3-1: Using the Tuning Toolbox - Solution

Lab Setup 
There is no setup for this lab. You can begin the lab again at any time.  There is a script that will need to be run for a section of the lab, but instructions are included in the lab details.

Objectives
After completing this lab, you should be able to:
* Learn how to use Adaptive Server diagnostic commands, session-level settings, operating system utilities, and the new security configurations to enable ‘set tracing’ commands. 
* Examine the output displayed by these tools 

Description
In this lab, you will be using basic diagnostic tools, set tracing commands, and use QP Metrics to understand how to tune queries.

Task Outline
Task 1: Using Basic Adaptive Server Diagnostic Tools. 
Task 2: Configuring user logins to execute ‘set tracing’ commands
Task 3: Using QP Metrics
Task 4: Using Advanced Adaptive Server Diagnostic Tools

Detailed Instructions and Solutions
Task 1: Using Basic Adaptive Server Diagnostic Tools
Description
The main purpose of this lab is to become familiar with the mechanics of activating and deactivating Adaptive Server diagnostic commands, settings, and utilities. In later modules and labs, you learn how to interpret the output of these tools.

Procedure

       

   
  
For all labs, you should open two windows (“A” and “B”). Unless instructed otherwise, perform all lab exercises in Window A. 
Make sure that you have exited ALL open sessions with Adaptive Server and that the operating system prompt appears in both windows. This ensures that your results will be consistent with the solutions for this lab.

The solutions for this lab, and all subsequent labs, will be shown using isql instead of jisql. While jisql provides better formatted output, isql provides more comprehensive diagnostic output.
The primary goal of this lab is to learn how to use some of the various Adaptive Server diagnostic tools. The detailed interpretation of the output displayed by these commands is covered in later modules.
1. Examine Adaptive Server user activity.
a. In Window A, connect to Adaptive Server as the sa using the NULL password.

isql -Usa -P
b. Examine the Adaptive Server user activity by executing sp_who.

sp_who

fid spid status   loginame origname hostname blk_spid dbname     tempdbname cmd               block_xloid 
--- ---- -------- -------- -------- -------- -------- ---------- ---------- ----------------- ----------- 
  0    2 sleeping (NULL)   (NULL)   (NULL)          0 master     tempdb     DEADLOCK TUNE               0 
  0    3 sleeping (NULL)   (NULL)   (NULL)          0 master     tempdb     ASTC HANDLER                0 
  0    4 sleeping (NULL)   (NULL)   (NULL)          0 master     tempdb     CHECKPOINT SLEEP            0 
  0    5 sleeping (NULL)   (NULL)   (NULL)          0 master     tempdb     HK WASH                     0 
  0    6 sleeping (NULL)   (NULL)   (NULL)          0 master     tempdb     HK GC                       0 
  0    7 sleeping (NULL)   (NULL)   (NULL)          0 master     tempdb     HK CHORES                   0 
  0    8 sleeping (NULL)   (NULL)   (NULL)          0 master     tempdb     PORT MANAGER                0 
  0    9 sleeping (NULL)   (NULL)   (NULL)          0 master     tempdb     NETWORK HANDLER             0 
  0   10 sleeping (NULL)   (NULL)   (NULL)          0 master     tempdb     LICENSE HEARTBEAT           0 
  0   12 running  sa       sa       edbet5          0 pubtune_db tempdb     INSERT                      0

What is the spid for the sa login?
In this example, the sa is spid 12.
Comment on the other processes.
In this example, there is only one user connection, the sa.
spid 2–14 are Adaptive Server background processes.
c. Verify the spid value for the sa by examining the Adaptive Server global variable @@spid.

select @@spid

 ------
     12

(1 row affected)

d. In Window B, connect to Adaptive Server as user1 using the password sybase.


The ASE login user1 was created as part of the setup for this course. The default database for user1 is pubtune_db.
isql -Uuser1 -Psybase

e. Examine the user activity by executing sp_who.

sp_who



fid spid status     loginame origname hostname blk_spid dbname     tempdbname cmd               block_xloid 
--- ---- ---------- -------- -------- -------- -------- ---------- ---------- ----------------- ----------- 
  0    2 sleeping   (NULL)   (NULL)   (NULL)          0 master     tempdb     DEADLOCK TUNE               0 
  0    3 sleeping   (NULL)   (NULL)   (NULL)          0 master     tempdb     ASTC HANDLER                0 
  0    4 sleeping   (NULL)   (NULL)   (NULL)          0 master     tempdb     CHECKPOINT SLEEP            0 
  0    5 sleeping   (NULL)   (NULL)   (NULL)          0 master     tempdb     HK WASH                     0 
  0    6 sleeping   (NULL)   (NULL)   (NULL)          0 master     tempdb     HK GC                       0 
  0    7 sleeping   (NULL)   (NULL)   (NULL)          0 master     tempdb     HK CHORES                   0 
  0    8 sleeping   (NULL)   (NULL)   (NULL)          0 master     tempdb     PORT MANAGER                0 
  0    9 sleeping   (NULL)   (NULL)   (NULL)          0 master     tempdb     NETWORK HANDLER             0 
  0   10 sleeping   (NULL)   (NULL)   (NULL)          0 master     tempdb     LICENSE HEARTBEAT           0 
  0   12 recv sleep sa       sa       edbet5          0 pubtune_db tempdb     AWAITING COMMAND            0 
  0   24 running    user1    user1    edbet5          0 pubtune_db tempdb     INSERT                      0


What is the spid for the user1 login? Write it down because you will need it later in this lab.
In this example, the spid value is 24.
Is the sa still connected?
Yes, spid 12 is still active for the sa.
f. In Window B, verify that the sa is still connected by executing sp_who and passing the login name, sa, or its spid value as the parameter.

sp_who sa

OR

sp_who '12'



fid spid status     loginame origname hostname blk_spid dbname     tempdbname cmd              block_xloid 
--- ---- ---------- -------- -------- -------- -------- ---------- ---------- ---------------- ----------- 
  0   12 recv sleep sa       sa       edbet5           0 pubtune_db tempdb     AWAITING COMMAND           0
2. Use the set statistics command to examine I/O activity and processing time.
a. In Window B, as user1, activate the statistics io session-level setting.

set statistics io on

Total writes for this command: 0

b. Execute the following query and fill in the chart that follows.

 select count(*) from titles
 

 -----------
        5000
Table: titles scan count 1, logical reads: (regular=624 apf=0 total=624),
physical reads: (regular=0 apf=0 total=0), apf IOs used=0
Total writes for this command: 0

(1 row affected)                                                                

Number of rowsLogical Reads (total)Physical Reads (total)50006240
c. Activate the statistics time session-level setting.

set statistics time on

Total writes for this command: 0

Execution Time 0.
    SQL Server cpu time: 0 ms.  SQL Server elapsed time: 0 ms.

d. Execute the following query and observe the cpu and elapsed times:

select count(distinct(price)), avg(price), min(price) 
from titles where type = 'computer'


Parse and Compile Time 0.
SQL Server cpu time: 0 ms.

 ----------- ------------------------ ------------------------
          75                    69.78                     1.95
Table: titles scan count 1, logical reads: (regular=624 apf=0 total=624),
physical reads: (regular=0 apf=0 total=0), apf IOs used=0
Table: Worktable1 scan count 1, logical reads: (regular=5 apf=0 total=5),
physical reads: (regular=0 apf=0 total=0), apf IOs used=0
Table: titles scan count 1, logical reads: (regular=624 apf=0 total=624),
physical reads: (regular=0 apf=0 total=0), apf IOs used=0
Total writes for this command: 0

Execution Time 1.
SQL Server cpu time: 0 ms.  SQL Server elapsed time: 13 ms.

(1 row affected)                                                                

e. Turn off the statistics io and statistics time session-level settings.


There are two ways to turn off session-level settings that are active for a user:
* Explicitly turn the settings off with the set command.
• 	Note that multiple settings can be activated and deactivated with either two individual commands or one combined command, for example:
set statistics io, time off
* Disconnect from your current session and reconnect.
By default, all session-level settings are off when you initially connect.
set statistics time, io off

Parse and Compile Time 0.
SQL Server cpu time: 0 ms.
         

3. Use the set showplan command to examine table access methods. 

a. In Window B, as user1, activate the showplan command.

set showplan on


b. Execute the following query and observe whether Adaptive Server uses an index or table scan:

select count(*) from titles


QUERY PLAN FOR STATEMENT 1 (at line 1).


    STEP 1
        The type of query is SELECT.

	2 operator(s) under root

       |ROOT:EMIT Operator (VA = 2)
       |
       |   |SCALAR AGGREGATE Operator (VA = 1)
       |   |  Evaluate Ungrouped COUNT AGGREGATE.
       |   |
       |   |   |SCAN Operator (VA = 0)
       |   |   |  FROM TABLE
       |   |   |  titles
       |   |   |  Table Scan.
       |   |   |  Forward Scan.
       |   |   |  Positioning at start of table.
       |   |   |  Using I/O Size 2 Kbytes for data pages.
       |   |   |  With LRU Buffer Replacement Strategy for data pages.

 -----------
        5000

(1 row affected)


Did Adaptive Server use an index or table scan to execute this query?
The showplan output clearly indicates that a table scan was used.
How many rows are in the table?
5000.
c. Execute the following query and observe whether Adaptive Server uses an index or table scan:

select count(*) from titles_idpr

QUERY PLAN FOR STATEMENT 1 (at line 1).


    STEP 1
        The type of query is SELECT.

	2 operator(s) under root

       |ROOT:EMIT Operator (VA = 2)
       |
       |   |SCALAR AGGREGATE Operator (VA = 1)
       |   |  Evaluate Ungrouped COUNT AGGREGATE.
       |   |
       |   |   |SCAN Operator (VA = 0)
       |   |   |  FROM TABLE
       |   |   |  titles_idpr
       |   |   |  Index : idx2
       |   |   |  Forward Scan.
       |   |   |  Positioning at index start.
       |   |   |  Index contains all needed columns. Base table will not be read.
       |   |   |  Using I/O Size 2 Kbytes for index leaf pages.
       |   |   |  With LRU Buffer Replacement Strategy for index leaf pages.

 -----------
        5000

(1 row affected)                                                                


Did Adaptive Server use an index or table scan to execute this query?
The showplan output indicates that an index was used.
How many rows are in this table?
5000.
4. Use the set noexec command to temporarily disable query execution.
a.	In Window B, as user1, activate the noexec command.


By using noexec in conjunction with showplan, which was activated in the previous step, you can examine table access methods without actually having the query execute. You activate and deactivate showplan and noexec together with one set command:

set showplan, noexec on
set noexec on


QUERY PLAN FOR STATEMENT 1 (at line 1).


    STEP 1
        The type of query is SET OPTION ON.

b.	Execute the following query and observe the table access method and determine whether the query actually executes:

select count(*) from titles

QUERY PLAN FOR STATEMENT 1 (at line 1).


    STEP 1
        The type of query is SELECT.

	2 operator(s) under root

       |ROOT:EMIT Operator (VA = 2)
       |
       |   |SCALAR AGGREGATE Operator (VA = 1)
       |   |  Evaluate Ungrouped COUNT AGGREGATE.
       |   |
       |   |   |SCAN Operator (VA = 0)
       |   |   |  FROM TABLE
       |   |   |  titles
       |   |   |  Table Scan.
       |   |   |  Forward Scan.
       |   |   |  Positioning at start of table.
       |   |   |  Using I/O Size 2 Kbytes for data pages.
       |   |   |  With LRU Buffer Replacement Strategy for data pages.
                                            


Did Adaptive Server use the same optimization as in step 2b?
Yes. The showplan output indicates that a table scan would be used.
Did the query actually execute? Explain.
No. The result, 5000, does not appear in the output.
c.	Turn off the showplan and noexec session-level settings.


There are two ways to turn off session-level settings that are active for a user:
* Explicitly turn the settings off with the set command.
* Note that multiple settings can be activated and deactivated with one command, for example:

set showplan, noexec off
Disconnect from your current session and reconnect.
By default, all session-level settings are off when you initially connect.	

set showplan, noexec off

QUERY PLAN FOR STATEMENT 1 (at line 1).


    STEP 1
        The type of query is SET OPTION OFF.
d.	Verify that the session-level settings are off by executing the following query:

select count(*) from titles

 -----------
        5000

(1 row affected)

5. Use the sp_showplan command to examine the query plan for a query in progress by another user.
a.	In Window A, as the sa, enter the text of the command to display the showplan output for user1, but do not execute the query yet!

Use the sp_showplan command and pass the spid value for user1 (see step 1e.) and then three NULL parameters for the batch_id, context_id, and stmt_num.
Do not execute the command until instructed!
sp_showplan 24, null, null, null

b.	In Window B, as user1, execute the following query and then proceed immediately to step 5c.


The query takes a few moments to complete. Do not wait for the query to finish before continuing with step 5c.
select * from titles


. . . (long output) . . .

c.	Quickly return to Window A, as the sa, and execute the sp_showplan command that you entered in step 5a.


QUERY PLAN FOR STATEMENT 1 (at line 1).


    STEP 1
        The type of query is SELECT.

	1 operator(s) under root

       |ROOT:EMIT Operator (VA = 1)
       |
       |   |SCAN Operator (VA = 0)
       |   |  FROM TABLE
       |   |  titles
       |   |  Table Scan.
       |   |  Forward Scan.
       |   |  Positioning at start of table.
       |   |  Using I/O Size 2 Kbytes for data pages.
       |   |  With LRU Buffer Replacement Strategy for data pages.
(return status = 0)


Was the sa able to examine the showplan output of the currently running query by user1?
Yes. The showplan output indicates that a table scan would be used.
Was the showplan output consistent with the output in step 4b?
Yes. Both showplan outputs indicate that a table scan would be used.


Task 2: Configuring user login to execute ‘set tracing’ command
Description
This lab demonstrates the need to setup user logins with appropriate privileges to execute the ‘set tracing’ command required when using the new ‘set plan’ option.  Starting with ASE 15.0, this privilege is also required to enable the traceflags 3604 and 3605. 

Procedure
1. Establish required privileges for individual logins to execute ‘set tracing’ command.
2. In Window A, login as sa or any login with an sso_role.

isql -Usa –P

a. Create login and password.

use master

sp_addlogin johnny, password, pubtune_db

Password correctly set.
Account unlocked.
New login created.
(return status = 0)

b. Create the database user.

use pubtune_db

sp_adduser johnny

New user added.
(return status = 0)

exit
c. In Window A, login as the new user

isql -Ujohnny -Ppassword

set option show_lio_costing on

Msg 10331, Level 14, State 1:
Server 'MAN103_2K', Line 1:
SET TRACING permission denied, database master, owner dbo



Was the command successful? Why?
Using the new login, the ‘set option show’ command failed.  The login ‘johnny’ was not granted the privilege to execute 'set tracing' command.

exit

d. In Window A, login as sa or any login with an sso_role and grant ‘set tracing’ privilege to ‘johnny’.  Since ‘johnny’ is a user in the pubtune_db, grant the privilege to the database user.

isql -Usa -P

use pubtune_db
grant set tracing to johnny

Msg 4632, Level 16, State 1:
Server 'MAN103_2K', Line 1:
The user must be in the master database in order to grant/revoke SET TRACING permission for access to SET PLAN FOR SHOW..., SET OPTION ..., and DBCC TRACEON/TRACEOFF(3604,3605)


Was the command successful this time? Why?
Based from the error message, the execution of the ‘grant’ command must be in the context of the ‘master’.

use master
grant set tracing to johnny

Msg 11105, Level 11, State 1:
Server 'MAN103_2K', Line 1:
No such user/role 'johnny' exists.



Was the command successful this time? Why?
The granting of the privilege failed.  ‘johnny’ has to be either a user in the ‘master’ database or a role to be granted the ‘set tracing’ privileges.
It is possible to grant this privilege to the 'guest' user in the master database, however this also presents another security hole such that any user who logins to the ‘master’ database with no associated default database, is automatically connected to the ‘master’ database as the 'guest' user.  They can then run the tracing commands.
It is better to grant this privilege to a user in the master database other than 'guest' or to a user-defined role.  
It is highly recommended to create a role that can be used specifically to execute SQL tracing and optimizer eaves-dropping.  Then bind the role to specific logins.

e. Create the role ‘opt_tracer_role’

use master
create role opt_tracer_role

f. Grant ‘set tracing’ privileges to the ‘opt_tracer_role’

grant set tracing to opt_tracer_role

g. Now grant the ‘opt_tracer_role’ to ‘johnny’

grant role opt_tracer_role to johnny

h. Verify that the role was granted to ‘johnny’

sp_displaylogin johnny

Suid: 13
Loginame: johnny
Fullname:
Default Database: pubtune_db
Default Language:
Auto Login Script:
Configured Authorization:
        opt_tracer_role (default OFF)
Locked: NO
Date of Last Password Change: Jun 19 2006  8:45PM
Password expiration interval: 0
Password expired: NO
Minimum password length: 6
Maximum failed logins: 0
Current failed login attempts:
Authenticate with: ANY
(return status = 0).

i. As shown in the above output, the role was granted but it is disabled by default.  Change the setting to enable it upon login.

sp_modifylogin johnny, 'add default role', opt_tracer_role

Option changed.
(return status = 0)

j. Verify the default setting of the ‘opt_tracer_role’

sp_displaylogin johnny

Suid: 13
Loginame: johnny
Fullname:
Default Database: pubtune_db
Default Language:
Auto Login Script:
Configured Authorization:
        opt_tracer_role (default ON)
Locked: NO
Date of Last Password Change: Jun 19 2006  8:45PM
Password expiration interval: 0
Password expired: NO
Minimum password length: 6
Maximum failed logins: 0
Current failed login attempts:
Authenticate with: ANY
(return status = 0).

k. In Window A, login as johnny and test out the 'set option show' command.

exit

isql -Ujohnny -Ppassword

set option show_lio_costing on

Was the command successful? Why?
Yes.  All required privileges have been granted.
l. In Window A, login as sa using pubtune_db and drop the user johnny, then use the master database and drop the login johnny

exit

isql -Usa -P  -Dpubtune_db

sp_dropuser johnny

User has been dropped from current database.
(return status = 0)

use master

sp_droplogin johnny

Account locked.
Login dropped.
(return status = 0)


m. Still in Window A, drop the opt_tracer_role

drop role opt_tracer_role with override




Task 3: Using QP Metrics
Description
This lab shows the basic steps in using query process metrics. 

Procedure
1. Enable QP Metrics to capture query execution statistics (time/IO/frequency) information.
a. In Window A, login as sa and access the pubtune_db database.

isql -Usa –P –Dpubtune_db
b. Check if sysquerymetrics view was created successfully.

select * from sysquerymetrics

uid         gid         hashkey     id          sequence exec_min    exec_max    exec_avg    elap_min    elap_max    elap_avg    lio_min     lio_max     lio_avg     pio_min     pio_max     pio_avg     cnt         abort_cnt   qtext
 ----------- ----------- ----------- ----------- -------- ----------- ----------- ----------- ----------- ----------- ----------- ----------- ----------- ----------- ----------- ----------- ----------- ----------- ----------- ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

(0 rows affected)

c. Disable qpmetrics during schema building stage.

set metrics_capture off

d. Create some tables and insert data for testing.

select * into t_metrics1 from titles
select * into t_metrics2 from titles
select * into t_metrics3 from titles

(5000 rows affected)
(5000 rows affected)
(5000 rows affected)

e. Double check the current content in sysquerymetrics view

select * from sysquerymetrics

uid         gid         hashkey     id          sequence exec_min    exec_max    exec_avg    elap_min    elap_max    elap_avg    lio_min     lio_max     lio_avg     pio_min     pio_max     pio_avg     cnt         abort_cnt   qtext
---------------------------------------------------------------

(0 rows affected)

f. Execute the following statement from within the isql session

!!isql –Usa –P –i$HOME/ptquery15/qpmetrics.sql

g. The qpmetrics.sql script runs the following queries

select title, price from t_metrics1 where type = "computer"

select distinct type from t_metrics1 where pub_id in
(select pub_id from t_metrics2)

select min(price)
from t_metrics1
where type in
	(select t_metrics2.type
	 from t_metrics2, t_metrics3
	 where (t_metrics2.pub_id = t_metrics3.pub_id and t_metrics3.title_id = 'T10'))

select count(t_metrics1.title_id)
from t_metrics1, t_metrics2, t_metrics3
where (t_metrics1.pub_id = t_metrics2.pub_id and
       t_metrics2.pub_id = t_metrics3.pub_id and
       t_metrics3.pub_id = 'P807')

 	The first query is run once, the second twice, etc.


2. Analyze the QP Metrics information.
a. Get the most expensive statement for tuning.  


A very typical approach is to find the most expensive statement as the candidate for tuning. The table sysquerymetrics provides CPU execution time, elapsed time, logical IO, and physical IO as options for measure. Use of these metrics depends on the main concern of the user. For example, a typical measure is based on logical IO.
 
select lio_avg, qtext from sysquerymetrics order by lio_avg

lio_avg     qtext                                                                                                                                                                                                                                                           
----------- --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- 
623         select title, price from t_metrics1 where type = 'computer'                                                                                                                                                                                                     
1395        select distinct type from t_metrics1 where pub_id in (select pub_id from t_metrics2)                                                                                                                                                                            
6850        select min(price) from t_metrics1 where type in (select t_metrics2.type from t_metrics2, t_metrics3 where (t_metrics2.pub_id = t_metrics3.pub_id and t_metrics3.title_id = 'T10'))                                                                              
47837       select count(t_metrics1.title_id) from t_metrics1, t_metrics2, t_metrics3 where (t_metrics1.pub_id = t_metrics2.pub_id and t_metrics2.pub_id = t_metrics3.pub_id and t_metrics3.pub_id = 'P807')                                                                

What is the value of the highest average logical I/O during the sampling period?
47837

It is very easy to see that the last statement in the above result has the biggest value for average logical IO. So it could be the best candidate for tuning (such as adding some indexes or rewrite the subquery etc)

b. Get the most frequently used statement for tuning.  


QP metrics has the benefit of aggregated information. Besides aggregated IO and time information, the number of times of execution is very useful. Typically, if a user can fine-tune a frequently used statement, it will improve the performance for an application more significantly.
select elap_avg, cnt, qtext from sysquerymetrics order by cnt

elap_avg    cnt         qtext                                                                                                                                                                                                                                                           
----------- ----------- --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- 
970         1           select title, price from t_metrics1 where type = 'computer'                                                                                                                                                                                                     
797         2           select distinct type from t_metrics1 where pub_id in (select pub_id from t_metrics2)                                                                                                                                                                            
66          3           select min(price) from t_metrics1 where type in (select t_metrics2.type from t_metrics2, t_metrics3 where (t_metrics2.pub_id = t_metrics3.pub_id and t_metrics3.title_id = 'T10'))                                                                              
1458        4           select count(t_metrics1.title_id) from t_metrics1, t_metrics2, t_metrics3 where (t_metrics1.pub_id = t_metrics2.pub_id and t_metrics2.pub_id = t_metrics3.pub_id and t_metrics3.pub_id = 'P807')                                                                

Which statement has the most number of executions in a batch?
The last statement has been executed 4 times in a batch. So it is the most frequently used statement. Coincidently, this statement has the biggest elapsed time as well. Therefore, it could be the best query candidate for tuning

c. Get the statement that has the longest execution time in the database.  

select exec_max, cnt, qtext from sysquerymetrics order by exec_max

exec_max    cnt         qtext                                                                                                                                                                                                                                                           
----------- ----------- --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- 
0           1           select title, price from t_metrics1 where type = 'computer'                                                                                                                                                                                                     
100         3           select min(price) from t_metrics1 where type in (select t_metrics2.type from t_metrics2, t_metrics3 where (t_metrics2.pub_id = t_metrics3.pub_id and t_metrics3.title_id = 'T10'))                                                                              
900        2           select distinct type from t_metrics1 where pub_id in (select pub_id from t_metrics2)                                                                                                                                                                            
1600        4           select count(t_metrics1.title_id) from t_metrics1, t_metrics2, t_metrics3 where (t_metrics1.pub_id = t_metrics2.pub_id and t_metrics2.pub_id = t_metrics3.pub_id and t_metrics3.pub_id = 'P807')                                                                

Which statement has the maximum execution time in the database?
The last statement has a maximum elapsed time of 1600 milliseconds as well as the most time for execution. A good candidate for tuning.

3. Discard some QP Metrics information.
a. Select the rows from sysquerymetrics table.

select * from sysquerymetrics

uid         gid         hashkey     id          sequence exec_min    exec_max    exec_avg    elap_min    elap_max    elap_avg    lio_min     lio_max     lio_avg     pio_min     pio_max     pio_avg     cnt         abort_cnt   qtext                                                                                                                                                                                                                                                           
----------- ----------- ----------- ----------- -------- ----------- ----------- ----------- ----------- ----------- ----------- ----------- ----------- ----------- ----------- ----------- ----------- ----------- ----------- --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- 
0           1           1648568886  988527524   0        0           0           0           970         970         970         623         623         623         0           0           0           1           0           select title, price from t_metrics1 where type = "computer"                                                                                                                                                                                                     
0           1           1597127962  1004527581  0        1000        1000        1000        990         1003        996         1395        1397        1396        122         122         122         2           0           select distinct type from t_metrics1 where pub_id in (select pub_id from t_metrics2)                                                                                                                                                                            
0           1           2051761208  1020527638  0        100         100         100         93          93          93          6850        6850        6850        103         103         103         3           0           select min(price) from t_metrics1 where type in (select t_metrics2.type from t_metrics2, t_metrics3 where (t_metrics2.pub_id = t_metrics3.pub_id and t_metrics3.title_id = 'T10'))                                                                              
0           1           2016899126  1036527695  0        1700        1800        1775        1750        1826        1771        47837       47839       47839       4           4           4           4           0           select count(t_metrics1.title_id) from t_metrics1, t_metrics2, t_metrics3 where (t_metrics1.pub_id = t_metrics2.pub_id and t_metrics2.pub_id = t_metrics3.pub_id and t_metrics3.pub_id = 'P807')                                                                
                                                                

b. Remove some QP Metrics from the system catalogs. Delete the row containing the query text ‘select title, price from t_metrics1 where type = "computer"’.

How do you determine which row to delete?

The stored procedure sp_metrics, when passed with the ‘drop’ parameter expects a group ID (gid) and row ID (id) of the row to be deleted.  The syntax is;

sp_metrics “drop”, “<gid>”, “<id>”

The group ID (gid) is 1 and the row ID (id) is 988527524.

sp_metrics ‘drop’, ‘1’, ‘988527524’ 
(return status = 0)

c. Verify that the row from sysquerymetrics table was deleted.

select * from sysquerymetrics

uid         gid         hashkey     id          sequence exec_min    exec_max    exec_avg    elap_min    elap_max    elap_avg    lio_min     lio_max     lio_avg     pio_min     pio_max     pio_avg     cnt         abort_cnt   qtext                                                                                                                                                                                                                                                           
----------- ----------- ----------- ----------- -------- ----------- ----------- ----------- ----------- ----------- ----------- ----------- ----------- ----------- ----------- ----------- ----------- ----------- ----------- --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- 
0           1           1597127962  1004527581  0        1000        1000        1000        990         1003        996         1395        1397        1396        122         122         122         2           0           select distinct type from t_metrics1 where pub_id in (select pub_id from t_metrics2)                                                                                                                                                                            
0           1           2051761208  1020527638  0        100         100         100         93          93          93          6850        6850        6850        103         103         103         3           0           select min(price) from t_metrics1 where type in (select t_metrics2.type from t_metrics2, t_metrics3 where (t_metrics2.pub_id = t_metrics3.pub_id and t_metrics3.title_id = 'T10'))                                                                              
0           1           2016899126  1036527695  0        1700        1800        1775        1750        1826        1771        47837       47839       47839       4           4           4           4           0           select count(t_metrics1.title_id) from t_metrics1, t_metrics2, t_metrics3 where (t_metrics1.pub_id = t_metrics2.pub_id and t_metrics2.pub_id = t_metrics3.pub_id and t_metrics3.pub_id = 'P807')                                                                
                                                                



Task 4: Using Advanced Adaptive Server Diagnostic Tools
Description
This lab shows how to use advanced Adaptive Server diagnostic tools.

Procedure

1. Use the optdiag utility to examine table and index statistics.
a. In Window A, as user sa, update the statistics for the titles table in pubtune_db.

update statistics titles

b. In Window B, as user1, end your Adaptive Server session and access the operating system prompt.

exit

c. Use the optdiag utility to examine the statistics for the titles table, which resides in the pubtune_db database.

optdiag statistics pubtune_db..titles -Usa -P

OptDiag/15.0.2/EBF 15388 ESD#3/P/Linux Intel/Linux 2.4.21-20.ELsmp i686/ase150/2193/32-bit/OPT/Tue Mar 11 11:19:44 2008
Adaptive Server Enterprise/15.0.2/EBF 15388 ESD#3/P/Linux Intel/Linux 2.4.21-20.ELsmp i686/ase150/2193/32-bit/FBO/Tue Mar 11 11:19:44 2008

Server name:                            "MAN103_2K"

Specified database:                     "pubtune_db"
Specified table owner:                  not specified
Specified table:                        "titles"
Specified column:                       not specified

Table owner:                            "dbo"
Table name:                             "titles"

Statistics for table:                   "titles"

     Data page count:                   624
     Empty data page count:             0
     Data row count:                    5000.0000000000000000
     Forwarded row count:               0.0000000000000000
     Deleted row count:                 0.0000000000000000
     Data page CR count:                79.0000000000000000
     OAM + allocation page count:       5
     First extent data pages:           0
     Data row size:                     232.7716000000000065
     Parallel join degree:              0.0000000000000000
     Unused page count:                 5
     OAM page count:                    1

  Derived statistics:
     Data page cluster ratio:           0.9981684981684982
     Space utilization:                 0.9251771087708588
     Large I/O efficiency:              1.0000000000000000

No statistics for remaining columns:    "advance"
(default values used)                   "contract"
                                        "notes"
                                        "price"
                                        "pub_id"
                                        "pubdate"
                                        "title"
                                        "title_id"
                                        "total_sales"
                                        "type"

Optdiag succeeded.



Are the Data Page and Data Row counts consistent with the query results recorded in section 1, step 2b? (Hint: compare the Data Page count displayed by optdiag with the total logical reads.)




